{
  "start": [
    2009, 
    6279, 
    11180, 
    17279, 
    21640, 
    27110, 
    30460, 
    36249, 
    41530, 
    46050, 
    49039, 
    52729, 
    58209, 
    64409, 
    69870, 
    76540, 
    82620, 
    87140, 
    89920, 
    94310, 
    101980, 
    109090, 
    113110, 
    118700, 
    124070, 
    130549, 
    135489, 
    138590, 
    141569, 
    148430, 
    153540, 
    157019, 
    161049, 
    163900, 
    171749, 
    175310, 
    178989, 
    184370, 
    187540, 
    191189, 
    196499, 
    203760, 
    208299, 
    212200, 
    216579, 
    221889, 
    228359, 
    232090, 
    235129, 
    239519, 
    243699, 
    247689, 
    253010, 
    256690, 
    260920, 
    265890, 
    270600, 
    275720, 
    278950, 
    282970, 
    285850, 
    288640, 
    294660, 
    301280, 
    306510, 
    311420, 
    313630, 
    317900, 
    324100, 
    328400, 
    334870, 
    343140, 
    346120, 
    352420, 
    356430, 
    361120, 
    368520, 
    371840, 
    376500, 
    380940, 
    383210, 
    387430, 
    393610, 
    397270, 
    400420, 
    404770, 
    410790, 
    415170, 
    420000, 
    424030, 
    426610, 
    432040, 
    436770, 
    440950, 
    446860, 
    452310, 
    457680, 
    463590, 
    468860, 
    474639, 
    479670, 
    484360, 
    489540, 
    494110, 
    498400, 
    501139, 
    507710, 
    511420, 
    515240, 
    519370, 
    524550, 
    531220, 
    536080, 
    542690, 
    546510, 
    549540, 
    552950, 
    556360, 
    561420, 
    565010, 
    571110, 
    578290, 
    581670, 
    585730, 
    590070, 
    595430, 
    600610, 
    604290, 
    610089, 
    614279, 
    618089, 
    623010, 
    625910, 
    630150, 
    632660, 
    637300, 
    642790, 
    646810, 
    652080, 
    655310, 
    657790, 
    663250, 
    666990, 
    673790, 
    679000, 
    684130, 
    689020, 
    693339, 
    698190, 
    701330
  ], 
  "end": [
    6279, 
    11180, 
    17279, 
    21640, 
    27110, 
    30460, 
    36249, 
    41530, 
    46050, 
    49039, 
    52729, 
    58209, 
    64409, 
    69870, 
    76540, 
    82620, 
    87140, 
    89920, 
    94310, 
    101310, 
    108980, 
    113110, 
    118700, 
    124070, 
    130549, 
    135489, 
    138590, 
    141569, 
    148430, 
    153540, 
    157019, 
    161049, 
    163900, 
    170900, 
    175310, 
    178989, 
    184370, 
    187540, 
    191189, 
    196499, 
    203499, 
    208299, 
    212200, 
    216579, 
    221889, 
    228359, 
    232090, 
    235129, 
    239519, 
    243699, 
    247689, 
    253010, 
    256690, 
    260920, 
    265890, 
    270600, 
    275720, 
    278950, 
    282970, 
    285850, 
    288640, 
    294660, 
    301280, 
    306510, 
    311420, 
    313630, 
    317900, 
    324100, 
    328400, 
    334870, 
    341870, 
    346120, 
    352420, 
    356430, 
    361120, 
    368120, 
    371840, 
    376500, 
    380940, 
    383210, 
    387430, 
    393610, 
    397270, 
    400420, 
    404770, 
    410790, 
    415170, 
    420000, 
    424030, 
    426610, 
    432040, 
    436770, 
    440950, 
    446860, 
    452310, 
    457680, 
    463590, 
    468860, 
    474639, 
    479670, 
    484360, 
    489540, 
    494110, 
    498400, 
    501139, 
    507710, 
    511420, 
    515240, 
    519370, 
    524550, 
    531220, 
    536080, 
    542690, 
    546510, 
    549540, 
    552950, 
    556360, 
    561420, 
    565010, 
    571110, 
    578110, 
    581670, 
    585730, 
    590070, 
    595430, 
    600610, 
    604290, 
    610089, 
    614279, 
    618089, 
    623010, 
    625910, 
    630150, 
    632660, 
    637300, 
    642790, 
    646810, 
    652080, 
    655310, 
    657790, 
    663250, 
    666990, 
    673790, 
    679000, 
    684130, 
    689020, 
    693339, 
    698190, 
    701330, 
    703930
  ], 
  "text": [
    "You&#39;ve seen a little bit of JavaScript code and in this section; I wanna talk", 
    "about what connect to that world to the machine code in the CPU. So, this is", 
    "beyond generally the topic of computer languages. So a programmer works in some", 
    "computer language and computer languages are said to have high, quote, &quot;high level", 
    "features&quot; and that means things like loops and if statements and strings. Those are", 
    "facilities that are more complicated, that are most present in a really simple", 
    "machine code on the CPU. So the programmer writes what it&#39;s called source code in", 
    "whatever computer language they are writing. So here is an example of some C++", 
    "source code, this assigns a string into a variable and then puts and exclamation", 
    "mark on the end of that string. You know what? Some, it&#39;s kinda similar to the", 
    "JavaScript code we&#39;ve seen A lot of these languages at the syntactic level, eh, ", 
    "they&#39;re kind of similar with the use of quotes and semicolons or what not. So how do you get", 
    "from the C++ source code say to running on a CPU? So one strategy used is what&#39;s", 
    "called a Compiler. And, the Compiler is a separate program. And what the compiler", 
    "does is it looks at all of the source code and it does a bulk translation over to a,", 
    "to create a big body of machine code. So for example maybe there is a part of the", 
    "source code where there is an if statement. And there is not a specific", 
    "instruction in a machine code for an if statement but maybe there&#39;s a sequence of", 
    "five machine code instructions that in effect make up an if statement and so the", 
    "compiler does that kind of expansion. So, just an example Firefox is written in C++", 
    "and so, to make a new version of Firefox someone runs the C++ compiler and it reads", 
    "in the many source files that, the great body of source code that makes", 
    "up Firefox and produces, essentially, firefox.exe. Firefox.exe is the output of", 
    "the compiler to just translate all of that source code. Couple of things to point out", 
    "about this: the compilation only has to happen once. So somebody with source code,", 
    "someone makes Firefox.exe and then you can just send out Firefox.exe. The", 
    "end users don&#39;t need the source code and they don&#39;t need the", 
    "compiler so the compilation can just sort of to be done, done at the factory in", 
    "effect. Another effect, another feature of this is that it doesn&#39;t work backwards, So, I can", 
    "distribute firefox.exe all through this machine code but there&#39;s not something", 
    "that will read that in and go backwards to give me a big body of source code. Or at least", 
    "not perfectly. You can sort of do it imperfectly but ideally, to produce a new", 
    "version you who really want the source code. So, let&#39;s talk about the source code", 
    "a little bit. So if you wanna add a feature of fix a bug to Firefox, real way", 
    "to do that is to go back to the original source code and rework it just what we&#39;ve", 
    "done in JavaScript. So, add a few lines or an If statement to change some behavior", 
    "and some way into source code and then run the compiler again to make in effect a new", 
    "version of Firefox that has this, this little change that you&#39;ve put in the", 
    "source code. And just as we&#39;re, we&#39;re talking about source code. There&#39;s also", 
    "give you, gives you a sense of what Open Source software means. So, Open Source", 
    "software is a format where the program is distributed but also there&#39;s access to the", 
    "original source code to the program and usually does come with a license saying,", 
    "hey here&#39;s the source code if you wanna make your own version or if it&#39;s about", 
    "whatever, this program, feel free. So, the two main features of Open Source software", 
    "is one, it&#39;s, it&#39;s typically distributed for free so it&#39;s just, you know, cheap.", 
    "But the other feature is it comes with a sort of freedom. Because if the software", 
    "is close source and you want some different feature there is some bug that", 
    "you need implemented you&#39;re really dependent on the vendor who holds the", 
    "source code like do they feel like implementing that feature. In contrast", 
    "with open source software it&#39;s like there is no handcuffs you know the source code", 
    "is available and if there is something that you really wanted to do or say the", 
    "original vendor goes out of business then because you got the source code you could", 
    "or you know maybe pay someone to make a change and produce your own custom", 
    "version. And so it comes with this sort of deep, you could take this as an insurance", 
    "policy. So often there&#39;s, there&#39;s many different types of license terms for open", 
    "Source software but most often they require in some cases that if you take the", 
    "source code and add some feature that you then offer those changes back to the", 
    "community. So sort of in the same way that you&#39;ve benefited from others work they can", 
    "benefit from your work. In, in the details on how that can be done is complicated.", 
    "There&#39;s, there&#39;s many different forms of it. I&#39;m gonna talk about open source", 
    "software a little bit later on but I just want to mention it now because it really", 
    "gets up this idea of what is the source code of a program versus just having the", 
    ".exe or something. So that&#39;s why I just talked about C++. So there&#39;s, a whole", 
    "another very big category of languages. We come in to call Dynamic Languages Or", 
    "sometimes interpreter languages. And there&#39;s sort of a big strategy, there are", 
    "many different languages with many different qualities and I&#39;m just kinda", 
    "sort of lumping it into this large category. So examples of Dynamic Languages", 
    "currently are Java and JavaScripts and Python. So one way that these can work is", 
    "that they are implemented by what is called an interpreter as supposed to the", 
    "compiler case I was describing earlier so an interpreter is a program which takes in", 
    "code written in some language and sort of quote, unquote runs it so. Best example is", 
    "that there is this computer language called JavaScript that actually we&#39;ve been", 
    "using and web browsers which are programs include as part of them a Java Script", 
    "interpreter and so when the web browser comes across a page with some JavaScript", 
    "code in it, it can use the interpreter to run that code to make it do whatever it&#39;s", 
    "going to do. So, an available detail, the way an interpreter works. Is that it, it", 
    "deals with the program one line at a time. So, if, so here&#39;s a little bit of", 
    "JavaScript code. If the interpreter wanted t run this, well, we&#39;ll look at the first", 
    "line and it would look at what that line says and then the interpreter would do it.", 
    "So in this case the interpreter would say oh well, I guess I need a variable name a", 
    "and I need to put a one in it. So, once it summed at that line it goes ahead and it", 
    "does the next line and so on. So the compiler does this big bulk translation", 
    "from the source code into machine code. But it&#39;s not really running code, it&#39;s", 
    "just doing a translation to be run in the future. In contrast, the interpreter", 
    "really lives in the moment Just going through the code line by line and just", 
    "doing it. So let me talk a little about the differences between these two and I", 
    "should tell you as a disclaimer there are many computer languages. There is no best", 
    "language. The old joke is that. Really when, you know, you&#39;re on this seminar and", 
    "you are arguing about the pros and cons or something. Ultimately, the answer is just", 
    "it depends. Like there&#39;s not a best language, it&#39;s like well, what&#39;s the best", 
    "language for the situation with all the, with all the feature. So broadly speaking,", 
    "compiler code does tend to run faster and when you put, when you compile C++ code", 
    "and produce that EXE, it&#39;s sort of in a sense lean. A lot of detail and decisions", 
    "has been stripped out as much as possible. On the other hand, dynamic or interpreter", 
    "languages tend to have more features. More features that make their programmers job a", 
    "little bit easier or put in another way. Broadly speaking, programmers can tend to", 
    "get more work done per hour in dynamic languages than they do in compiled", 
    "languages. However there is no free lunch. It is also the case that dynamic language", 
    "code tends to run slower on the CPU in terms of just getting work done compared", 
    "to a compiled language, compiled source code that was going to do the same thing.", 
    "So, an example of this, a great example of this is memory management. So, memory", 
    "management refers to the problem in the code of knowing how many bytes are needed", 
    "to store something And in particular, for how long. Well, I need these bytes for", 
    "here on line six but maybe on line twenty. I don&#39;t need them anymore and I can reuse", 
    "those bytes for something else. And that is actually a kind of a complicated", 
    "problem. In C and C++ memory management is to a degree manual and that just means", 
    "that the programmer, they&#39;re producing all these lines of codes to do stuff and there", 
    "is going to be times when they maybe to add some lines to do some thinking to help", 
    "guide the memory management so there is some programmer effort required. In", 
    "contrast most dynamic language have what&#39;s called automatic memory management and", 
    "this means that. No programmer input is required that the lower on the stacks that", 
    "the language is gonna notice automatically when memory is needed; when memory is not", 
    "needed anymore it can be recycled and just take on that whole problem. So, this fits", 
    "within the, the, the trend of dynamic languages that I was mentioning earlier.", 
    "So this is an example of how well, you know, because the programmers has less to", 
    "do they&#39;re able to just get stuff done a little quicker, so memory management is a", 
    "great example of that. However, you can also imagine this is one of the things", 
    "that makes dynamic language codes run a little slower because the CPU now has this", 
    "additional bookkeeping problem where it&#39;s looking at memory and trying to figure out", 
    "of when it can be reused. So, very broadly speaking the trend for computer", 
    "programming today is towards dynamic languages that the trade off that. The", 
    "programmer will get things done a little quicker at the expense of using a little", 
    "more CPU or maybe a little more memory, that&#39;s a pretty attractive payoff for many", 
    "for many problems. And this is maybe a little unintuitive but you can think of well", 
    "what&#39;s the scariest quality for a computer program and oftentimes, it&#39;s the", 
    "programmer that having skilled programmers working on a problem who, you know,", 
    "are working on this, working on this  domain, a lot of times they&#39;re hard to", 
    "find and so using up their hours, using fewer of their hours looks attractive. In", 
    "contrast the CPU only we want programs to run as fast as possible but cpus are", 
    "fairly, and if it got some fairly, effective and there was even this funny", 
    "effect where Moore&#39;s Law keeps making it more truth. Where the CPU in a fact each", 
    "year gets a little bit cheaper, but if you think of the balance between the", 
    "programmer cost and the CPU cost of getting something done, that means in", 
    "terms of the share of the pie, the programmer is in a fact of getting more", 
    "expensive each year. A little bit more scarce. So, this fits the pattern that on,", 
    "on, on, on whole, dynamic languages are becoming a little bit more popular. Just", 
    "the last thing I&#39;ll mention is that there&#39;s, I think a thing called a JIT, a", 
    "Just in Time compiler and this is sort of the natural synthesis of the compiler and", 
    "interpretative strategies of trying to get the best of both worlds. It&#39;s like, well,", 
    "we&#39;d like to have a dynamic language with all these features, all these", 
    "programmer-friendly features but we wanted to run fast and so the JIT will take parts", 
    "of the code and try and compile them on the fly and so it tries to sort of", 
    "marry the two approaches. It turns out this works pretty well. So all modern", 
    "browsers now have jets for JavaScript code so actually when you are running", 
    "JavaScript code even for this class inside of the browser there was a jet that was in", 
    "a very physical way on the fly, taking those scraps of JavaScript code and", 
    "compiling them on the fly into native code. Anyway, you", 
    "do not get exactly the performance of compiled code but it gets fairly close. So, this", 
    "is, this is actually how most dynamic languages work first. And I&#39;ll say", 
    "well, it&#39;s an active area of research but it seems to work pretty well."
  ]
}