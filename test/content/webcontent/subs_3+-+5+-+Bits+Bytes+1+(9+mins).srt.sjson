{
  "start": [
    0, 
    6583, 
    12716, 
    17553, 
    22777, 
    27936, 
    33354, 
    39232, 
    44878, 
    50048, 
    55774, 
    61761, 
    67747, 
    73715, 
    79083, 
    84245, 
    89681, 
    94703, 
    99109, 
    103459, 
    107978, 
    112667, 
    116791, 
    122448, 
    128079, 
    133068, 
    137510, 
    142317, 
    147184, 
    151605, 
    156023, 
    160495, 
    165279, 
    170255, 
    175232, 
    180148, 
    185125, 
    189748, 
    194204, 
    200943, 
    205464, 
    209984, 
    214560, 
    219024, 
    223656, 
    228288, 
    232800, 
    237355, 
    241633, 
    245938, 
    250355, 
    254549, 
    259078, 
    263271, 
    267856, 
    272297, 
    277306, 
    282068, 
    287263, 
    292211, 
    297096, 
    301982, 
    306552, 
    311289, 
    315967, 
    320763, 
    325560, 
    333904, 
    338168, 
    342595, 
    347637, 
    352616, 
    357720, 
    362762, 
    367520, 
    373303, 
    379230, 
    385089, 
    391451, 
    397937, 
    403588, 
    409351, 
    413882, 
    418716, 
    423714, 
    428286, 
    433086, 
    437943, 
    442058, 
    446744, 
    451315, 
    458152, 
    465849, 
    471700, 
    476945, 
    483265, 
    489414, 
    495485, 
    502107, 
    508828, 
    514782, 
    523264, 
    529614, 
    536466, 
    542704, 
    547916, 
    553480, 
    559396
  ], 
  "end": [
    6583, 
    12716, 
    17553, 
    22777, 
    27936, 
    33354, 
    39232, 
    44878, 
    50048, 
    55774, 
    61761, 
    67747, 
    73715, 
    79083, 
    84245, 
    89681, 
    94703, 
    99109, 
    103459, 
    107978, 
    112667, 
    116791, 
    122448, 
    128079, 
    133068, 
    137510, 
    142317, 
    147184, 
    151605, 
    156023, 
    160495, 
    165279, 
    170255, 
    175232, 
    180148, 
    185125, 
    189748, 
    194204, 
    200943, 
    205464, 
    209984, 
    214560, 
    219024, 
    223656, 
    228288, 
    232800, 
    237355, 
    241633, 
    245938, 
    250355, 
    254549, 
    259078, 
    263271, 
    267856, 
    272297, 
    277306, 
    282068, 
    287263, 
    292211, 
    297096, 
    301982, 
    306552, 
    311289, 
    315967, 
    320763, 
    325560, 
    333904, 
    338168, 
    342595, 
    347637, 
    352616, 
    357720, 
    362762, 
    367520, 
    373303, 
    379230, 
    385089, 
    391451, 
    397937, 
    403588, 
    409170, 
    413882, 
    418716, 
    423714, 
    428286, 
    433086, 
    437943, 
    442058, 
    446744, 
    451315, 
    458152, 
    465849, 
    471700, 
    476945, 
    483265, 
    489414, 
    495485, 
    502107, 
    508828, 
    514782, 
    523264, 
    529614, 
    536466, 
    542704, 
    547916, 
    553480, 
    559396, 
    561260
  ], 
  "text": [
    "So in this section I'm going to talk right at the smallest level inside of the", 
    "computer at individual bits and bytes. So, a bit in a computer is the smallest amount", 
    "of storage that you can have, like an atom. So a bit just stores a zero or a", 
    "one. Those are the only two states it can do. So you may have heard the expression,", 
    "oh well, in computers, you know, it's all zeroes and ones. That's referring to bits.", 
    "Everything in the computer is built up out of this larger and larger collections of", 
    "these simple bits which is just zero and one. So In the hardware, Anything that", 
    "can, is capable of taking on two different states and when it takes on one state it", 
    "can stay in it. That's how you can represent a bit in hardware and there's a", 
    "bunch of different ways of doing it. I've actually just as a prop. I built this bit", 
    "here. So this is a bit made out of a tennis racket with some plastic in it. And", 
    "the way this works is that it has two different states. So I'm gonna just call", 
    "the state the zero state, and then I can push it to the other state. The plastic", 
    "snaps and it stays, we'll call that the one state so I could switch it back to", 
    "zero. Zero, turn around, there's one. So, it's a trivial example but at the hard", 
    "rail of it shows, we have few have two different state and its stable. When you", 
    "put it in a state, it stays. That's enough to represent a bit in the computer and we", 
    "see different forms of it so with the transistor, the two different states are", 
    "done by having little tiny groups of electrons. On the hard drive platter the", 
    "two different states are done by having either a little area set to either North", 
    "magnetism or South magnetism and later can come back and look, you know just say oh", 
    "well, we'll say if it's North, that's a one and if it's South, it's zero or", 
    "whatever. So, the bit just by itself, it's too small to be good for anything. It's", 
    "just, you know? Zero and one, So, really what we're gonna do is to group eight bits", 
    "to make a byte. And the byte is just this very common unit of measurement. So, if an", 
    "example byte is written out, I sort of think about it like this. Like well,", 
    "you're gonna have eight digits but the digits are binary so each one is just a", 
    "zero or a one. And so, any eight, any byte we could think of is just gonna be this", 
    "pattern of eight 0's or 1's. As I mentioned before a byte in the real world", 
    "you can think of it as sorting kinda one type letter so it's really, it's pretty", 
    "small. It holds, holds very little but we can you know build up other measures out", 
    "of it. So the question I wanna look at is. Exactly how much can one byte hold? And I", 
    "wanna work out the math for that. Now I'm not gonna hold everyone responsible for", 
    "the details of this but I wanna go to the derivation just so you can see it. So", 
    "the question I'm going to explore is, if I have a number of bits, how many patterns,", 
    "hHow many distinct patterns can I make with those bits? And I'm gonna; first of all", 
    "just consider either one bit, two bits, or three bits. So I, I've put these in a", 
    "little table. So if I have one bit, I'm gonna say, this one you could do on your", 
    "head. There's just two patterns. Either it's a zero or it's a one. There's no", 
    "center pattern and that's it, two is all we can do. So supposed we've got two bits so", 
    "I'm gonna imagine putting the two bits next to each other so there's like a left", 
    "bit and a right bit and then we can work out the patterns for that. Well, let's see", 
    "there's the pattern where both bits are zero then there's the pattern where the", 
    "left bit is zero and the right bit is one and then going the other we can have the", 
    "left bit be one and right bit be zero and then finally there's the case where both", 
    "bits are one so at two bits I can get four patterns. Now, for three bits it gets a", 
    "little more complicated so I'm gonna, I'm gonna sort of break the problem down and", 
    "walk through how many patterns that's going to make. So for three bits, the", 
    "trick is gonna be, so here's the three-bit case down here. Just consider so I'm, I'm", 
    "imagining I have three bits next to each other, just consider the left most bit.", 
    "Let's just isolate on the left most bit. And, there's only two possibilities.", 
    "Either the left most bit is zero or the left most bit is one, that's the only two", 
    "possibilities. So let's just consider the case, just supposed it's zero. Just", 
    "supposed it's a zero, so that's gonna give me this top row. Well if I just lock the", 
    "left most bit at zero, then I've got this other two bits at the right of it. But", 
    "actually we already worked out how many patterns are possible with two bits that", 
    "might reappear, just four, that's just four patterns. And so if I lock the left", 
    "most bit at zero there's, then I get four patterns cuz I have zero and then each one", 
    "of the four patterns for two bits so in this highlighted row that gives me four.", 
    "So that was the case where the left most bit is zero. What's the other case? The", 
    "other case is that the left most bit is one and if I lock the left most bit at", 
    "one. You know I just got those four patterns again like I still have two bits", 
    "to the right and so I get in a sense another copy of the four patterns that can", 
    "be made with two bits. So for three bits it works out actually that there eight", 
    "patterns and I'm thinking of them as kind of like well, there's the four with the", 
    "left most bit of zero and then there is four again with the left most bit as one.", 
    "So if you, in general, you can see it here even my little table, for each row, On the", 
    "next row, you're basically adding a bit to the left and so what that's gonna do is", 
    "just double the number of patterns that you have in the row above. And so I've run", 
    "through the math here so with one bit we saw that there were two patterns, just a", 
    "zero or one. So then when I go to two bits, I get four patterns and three bits, I get", 
    "eight patterns. But if you just look at the numbers here you can see its doubling.", 
    "It goes two, four, eight, sixteen so each time I add one bit which I'm thinking sort", 
    "of going out to left, it doubles the number of patterns I can make. So if we", 
    "just follow this through, it goes 32, 64, 128 and with eight bits there are 256", 
    "different patterns possible. And of cour se eight bits that's the size of a byte,", 
    "so it works out. One byte can store 256 different patterns. Mathematically in", 
    "turns out to be exponential so with n bits I can make two to the nth different", 
    "patterns, Two to the nth power so the case I wanna focus on is one byte. And here's", 
    "what you need to know. So, one byte is a group of eight bits. And I've sort of gone", 
    "through the derivation that with eight bits, 256 different patterns are possible.", 
    "So, I think the natural question is, where well, pattern, what's that good for?", 
    "Really what I wanna do is think about, how can I use those patterns to represent", 
    "numbers? So the way I'm gonna think about numbers is each number is gonna get one of", 
    "the 256 different patterns and I'm not gonna get into details of, of how they're", 
    "assigned but each number needs its own and it can't share a pattern with some other", 
    "number. So the way when I think about it, is just bullet. Let's give some pattern to", 
    "number zero. So we, we've got 256 patterns, we'll give one of them to zero", 
    "and then we'll give another pattern to 1 and another pattern to 2 and another", 
    "pattern to 3 and so on. And we'll just try to keep going until we run out of", 
    "patterns. So let's go to work, is we get up to 254 and then the last pattern, we", 
    "have one left we'll use for the number 255 so 255 will be the maximum representable", 
    "number in one byte. I think a reasonable question would be, okay I got 255. Why", 
    "isn't it 256? We have 256 different patterns and the reason it's not 256 is", 
    "that we use one pattern for number 0. So we use that one up and then if you just", 
    "count up the number of, the number of numbers I have here. 255 is gonna require", 
    "the last pattern; pattern number 256. So, turns out if you think of what can be", 
    "stored in one byte as a number, the counter representation is that one byte will store", 
    "numbers between zero up to 255. So 255 is the max. So this actually came up earlier", 
    "when we were looking at code like pixel.setRed and what number did it take?", 
    "Pixel.setRed takes a number in the range 0-255. Why? Why? And the reason is", 
    "that the red value for pixel in the computer is stored in one byte. And that", 
    "byte can store numbers in the range 0-255. It's just, that's it. It cannot store", 
    "300 or -12 or whatever. So that's why. In this, in this scheme, setRed takes", 
    "the numbers 0-255. It actually reflects that the red value - and this is", 
    "also true for the green and the blue values - each one of those is stored by one", 
    "eight bit byte and so that's why the range is exactly zero to 255. So, the mystery of", 
    "the 255. Now you know."
  ]
}