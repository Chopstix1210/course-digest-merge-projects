<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workbook_page PUBLIC "-//Carnegie Mellon University//DTD Workbook Page MathML 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_mathml_3_8.dtd"><workbook_page xmlns:bib="http://bibtexml.sf.net/" xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/" xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:pref="http://oli.web.cmu.edu/preferences/" xmlns:theme="http://oli.web.cmu.edu/presentation/" xmlns:wb="http://oli.web.cmu.edu/activity/workbook/" id="u-code_basic-m-code_basic-p-code_writing"><head><title>Code Writing</title><objref idref="u-code_basic-m-code_basic-p-code_writing_LO_1" /><objref idref="u-code_basic-m-code_basic-p-code_writing_LO_2" /><objref idref="u-code_basic-m-code_basic-p-code_writing_LO_3" /></head><body><image id="d4b0d50f9a414a07ad2f8aea08c18e6c" src="../webcontent/1x1.png" alt="" style="inline" vertical-align="middle"><caption><p id="dca2a02d924e483b940609f0758518cd" /></caption><popout enable="false"></popout></image><section id="b6a76532cb6c4fb3936ee11592af5edb"><title>Simple Print Code</title><body><p id="bd0867c10c0247c48d2075e13e1abd3e">Every action performed on a computer relies on <em style="italic">code</em>—the language we use to communicate with computers. In its written form, code appears very inflexible and mechanical, reflecting the internal mechanical quality of the computer itself. To understand the nature of computers, you need to understand the code. And the best way to understand the code is to play with it until you become familiar and comfortable with it.</p><p id="dbab34d05fe74a36851a646d58b22774">To that end, we write and run short snippets of code in this section. We start with some simple programming elements that may not look like much on their own. Be patient, though: we&apos;ll later combine these elements in various ways, like so many Lego blocks, to form solutions for many user needs. </p></body></section><section id="b11569d4a036492dacf9184f0362c1fc"><title>JavaScript Computer Language</title><body><p id="da310804a53748e29535d857025f397d">For this class, we use a variant of the JavaScript language with some added features for this course. The JavaScript language works in the web browser, so all of our experiments can live right in the browser with nothing else required. We look at just the JavaScript needed for our experiments, not at the full language used by programmers. That said, JavaScript is a real language and our code is real code. The small programs in this course are simplified to enable you to master the essential features of code.</p></body></section><section id="ae2f461c2ca84c02a29a6d599be3db57"><title>Simple Print Code</title><body><p id="e9bc2ce999174cf894eb24c6d6d4e626">The following code example calls the <code>print</code> function. Click the <em>Run</em> button to see what the code does. Your computer will run the code, and the code&apos;s output should appear in the web page.</p><codeblock id="cc1c1faa00d44ff69fb5f91af81a9b45" syntax="text" highlight="" number="false" start=""><![CDATA[<textarea id="code1-1" rows="6" cols="55" spellcheck="false" onKeyPress="return handleCR(this ,event)">
              print(2);
              print(4, 6);
            </textarea>
            <input type="button" value="Run" onClick="evaluateClear("code1-1")"/>]]></codeblock><p id="d370d8519aa947fa80efe46ef00f9ae9"> The value <code>Run</code> executes each line once, running from top to bottom. The word <code>print</code> here is a function. The <code>print</code> function knows how to insert values into the web page, and the code &quot;calls&quot; the <code>print</code> function to invoke it. The code passes values for the function to use within a pair of parentheses—for example, <code>print(4, 6);</code>. We call many other functions as we progress through this course, and all of the functions use the values-within-parentheses pattern. Each line of code ends with a semicolon, although the code often works even if the semicolon is omitted. Note that <code>print</code> is not a normal part of JavaScript. The function was added just for this course. </p></body></section><wb:inline idref="a_722d88b9795040ff9fdd136f02c64a11" purpose="learnbydoing" /><section id="c8d711a2eebe413ab013221460bcb0bc"><title>Example: Print String</title><body><p id="cf9ab2af1c7c43a3b56001ef65e40186">Thus far, we have called the <code>print</code> function with numbers: for example, <code>print(2);</code></p><p id="a1eab7a97fed4fc7981eb53034026c0e">A <em style="italic">string</em> is a sequence of letters written inside two quotation marks to be used as data within the code: for example, <code>&quot;hello&quot;</code> is a string. The <code>print</code> function works with strings as well as with numbers. Strings are used in the computer to store text, such as URLs or the text of paragraphs. </p><p id="face2290ba2d4520aa80da83a5c2f542">A <em style="italic">comment</em> in code begins with <code>//</code> and extends through the end of the line. A comment is a way to write notes about the code, and they are ignored by the computer. Click the <em>Run</em> button to see what this code example does.</p><codeblock id="c10678a8c83d400f8bf3e189576a2400" syntax="text" highlight="" number="false" start=""><![CDATA[<textarea id="code1-2" rows="7" cols="55" spellcheck="false" onKeyPress="return handleCR(this ,event)">
              // The line below prints one number and one string
              print(6, "hi");
              print("hello", 2, "bye");
            </textarea>
            <input type="button" value="Run" onClick="evaluateClear("code1-2")"/>]]></codeblock><p id="ffac72bd599b475a95849279516c4188" /></body></section><wb:inline idref="a_db1ed0eb4a1f4330a04b94735a05379f" purpose="learnbydoing" /><section id="a39a830d7fbb411487301075d29604e7"><title>Thinking about Syntax and Errors</title><body><p id="c46c298669ec4f8b95dcbc9370385cdc">The <em>syntax</em> of the code must fit the allowed patterns exactly, or the code will not work. An example of code syntax is that each string must be marked by opening and closing quotation marks.</p><p id="ce7c9a50a4f34da3ae6458f621bacc82">The rigidity of the syntax is a reflection of the limitations of computers: their natural language is fixed and mechanical. This point is important to absorb when working with computers, because misunderstanding it is an easy way to get derailed when starting to learn about computers. You write something that any human could understand, but the computer can only understand the code where it fits the computer&apos;s mechanical syntax, so it gives an error message.</p><p id="cfbf479cd5dd46a284ead88a8299786a">When writing for the computer, it is very common to make trivial, superficial syntax mistakes in the code. The most expert programmers make syntax errors all the time and think nothing of it. The syntax errors do not reflect a flawed strategy by the author. They occur as a natural step in translating our thoughts into the more mechanical language of the computer. As we see shortly, fixing these errors is often quite simple.</p><p id="f6cbcbe80d78430dad520704a976c863">It is important to not be derailed by superficial errors. To help teach you the patterns, we look at a few examples of typical errors so that you can see what the error messages look like and learn how to fix them.</p><p id="b4d6168cd800419ab3bc1f9fdd508e39">Run each snippet of code below to see the error message pop up. The text describes the small syntax error that is breaking each case. You will see error messages like this when your own code contains syntax errors. Don&apos;t be put off by those errors. Often, they are quite easy to fix.</p></body></section><section id="ff588e3ccecf465f9ad1571362eb5d09"><title>Example: Syntax Errors</title><body><p id="ee2429561ac8469d977facb7fed0d835">Run each of the following code examples to see how a small syntax mistake keeps the code from running.</p><p id="a36deb3ae7be4fba93a95bb3acf4e4b2">1. Here, the error is that &quot;print&quot; is mistyped: the <em style="italic">i</em> is missing.</p><codeblock id="cd8362dc2f71438289a2f45f46875c89" syntax="text" highlight="" number="false" start=""><![CDATA[<textarea id="code1-err1" rows="6" cols="55" spellcheck="false" onKeyPress="return handleCR(this ,event)">
              print("a");
              prnt(1, "b");
              print(2, "c", 3);
            </textarea>
            <input type="button" value="Run" onClick="evaluateClear("code1-err1")"/>]]></codeblock><p id="b7bd0f074f0b441cb23108920eb0fc34" /><p id="a03badfe87c14dd6bb03d2bf94c6a457">2. Here, the error is that the <code>&quot;b&quot;</code> string is missing its closing quotation mark.</p><codeblock id="b6b1be96584e48d08ead39c25b49ecf6" syntax="text" highlight="" number="false" start=""><![CDATA[<textarea id="code1-err2" rows="6" cols="55" spellcheck="false" onKeyPress="return handleCR(this ,event)">
              print("a");
              print(1, "b);
              print(2, "c", 3);
            </textarea>
            <input type="button" value="Run" onClick="evaluateClear("code1-err2")"/>]]></codeblock><p id="c5b682a3597042549e0b3d493eacd627" /><p id="a93ecd0fbf0e4101864f03a479ff38ad">3. Here, the error is that the last print line is missing its closing parenthesis: ).</p><codeblock id="b05eaf3f6ff941f69a93442d4c7e5e1f" syntax="text" highlight="" number="false" start=""><![CDATA[<textarea id="code1-err3" rows="6" cols="55" spellcheck="false" onKeyPress="return handleCR(this ,event)">
              print("a");
              print(1, "b");
              print(2, "c", 3;
            </textarea>
            <input type="button" value="Run" onClick="evaluateClear("code1-err3")"/>]]></codeblock><p id="ee40540bfbfa4a0f9704a88e35136914" /></body></section><wb:inline idref="a_dd9bf3c936584ec48e92b01497a0e048" purpose="learnbydoing" /><codeblock id="a4d2f6c4bc604ad4bfcd5af499bec0bf" syntax="xml" highlight="" number="false" start=""><![CDATA[
      <image-coding url_name="d635108deac54048be49652d10efe4f6" xblock-family="xblock.v1" display_name="Learn By Doing" hints="Hint (1 of 3) Look carefully to see if anything is missing from a string.
Hint (2 of 3) Compare what is here to an example above that is working. 
Hint (3 of 3) The second string is missing a quotation mark ("), It should be "there"." tolerance="" body="<p>The starter code is intended to output the following, but the code contains a syntax error so it does not work.</p>

<pre>
1 2
hello there

</pre>

<p>Fix the syntax error in the code and run it so it produces the correct output." regex="1\s2\shello\sthere" starter_code="print(1, 2);
print("hello", "there);" solution_code=""/>
    ]]></codeblock><codeblock id="e3491e91325d48bc8464c24743b5d4e0" syntax="xml" highlight="" number="false" start=""><![CDATA[
      <image-coding url_name="e568963170b14f7ca5a7ba1f75d548aa" xblock-family="xblock.v1" display_name="Learn By Doing" hints="Hint (1 of 2) The first line of code is correct, look carefully at what could be changed with the second line. 
Hint (2 of 2) Edit the <code>print(8);</code> line so it prints 8 and 18, listing the two numbers between the parentheses, separated by a comma: <code>print(8, 18);</code>." tolerance="" body="<p>The starter code produces output when run, but not exactly the output we want. Edit the starter code so that it prints the following when run:

<pre>
7 17
8 18
</pre>" regex="7\s17\s8\s18" starter_code="print(7, 17);
print(8);" solution_code=""/>
    ]]></codeblock></body></workbook_page>
