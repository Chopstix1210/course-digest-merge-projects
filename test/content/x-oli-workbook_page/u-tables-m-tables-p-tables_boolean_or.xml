<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workbook_page
  PUBLIC "-//Carnegie Mellon University//DTD Workbook Page 3.8//EN" "http://oli.web.cmu.edu/dtd/oli_workbook_page_3_8.dtd">
<workbook_page xmlns:cmd="http://oli.web.cmu.edu/content/metadata/2.1/"
               xmlns:bib="http://bibtexml.sf.net/"
               xmlns:pref="http://oli.web.cmu.edu/preferences/"
               xmlns:theme="http://oli.web.cmu.edu/presentation/"
               xmlns:wb="http://oli.web.cmu.edu/activity/workbook/"
               id="u-tables-m-tables-p-tables_boolean_or">
   <head>
      <title>Tables: Boolean OR</title>
      <objref idref="u-tables-m-tables-p-tables_boolean_or_LO_1"/>
   </head>
   <body><!--The .xml file paired with the source html file read:
<html filename="3274809d73fe42dea7605834479cf0d9" display_name="Tables: Boolean OR" editor="raw"/>--><!--<h1>Tables: Boolean OR</h1>--><!--The .xml file paired with the source html file read:
<html filename="a8428a6055ae4ab6be3ba70c60a95660" display_name="Boolean OR: ||" editor="raw"/>--><image src="../webcontent/1x1.png"/><!--<script type="text/javascript" src="../webcontent/cs101-edx.js"/>--><!--<script type="text/javascript" src="../webcontent/cs101-table-edx.js"/>--><section>
         <title>Boolean OR: ||</title>
         <body>
            <p>This section introduces the Boolean OR, written as <code>||</code>. The two vertical bars <code>||</code> represent an <em style="italic">or</em> of two tests, just as double ampersands (<code>&amp;&amp;</code>) represent <em style="italic">and</em>. The code below uses <code>||</code> to test whether the row name starts with <em style="italic">Q</em> or with <em style="italic">X</em>. For readability, rather than have all of the test code on one line, the tests are written on separate lines. Run the code to see what it does.</p>
            <!-- CODE -->
            <codeblock syntax="text">&lt;textarea id="table3-3"
                      rows="11"
                      cols="70"
                      spellcheck="false"
                      onKeyPress="return handleCR(this ,event)"&gt;
table = new SimpleTable("baby-2010.csv");
for (row: table) {
  // your code here
  if (row.getField("name").startsWith("Q") ||
      row.getField("name").startsWith("X")) {
    print(row);
  }
}&lt;/textarea&gt;
            &lt;input type="button" value="Run" onClick="evaluateClear(&#34;table3-3&#34;)"/&gt;</codeblock>
            <!-- OUTPUT -->
            <p>Â </p>
            <p>In the output, we see a mixture of names, some starting with <em style="italic">Q</em> and some starting with <em style="italic">X</em>.
				</p>
         </body>
      </section>
      <wb:inline idref="a_0ca662a912184b4ca7cc664712255ec7"/>
      <codeblock syntax="xml">
			<!-- !!!vertical-->
&lt;image-coding url_name="b7801548573949c580c7a37f9fe04fc5" xblock-family="xblock.v1" display_name="Learn By Doing" hints="Hint (1 of 3): After the first test, add &lt;code&gt;|| ..something..&lt;/code&gt;.
Hint (2 of 3): After the first test, add &lt;code&gt;|| row.getField("name").startsWith("O")&lt;/code&gt;
Hint (3 of 3): &lt;code&gt;if (row.getField("name").startsWith("Q") || row.getField("name").startsWith("O")) {&lt;/code&gt;." tolerance="" body="&lt;p&gt;The starter code prints all the rows in which the name starts with Q. Edit the code to print the rows in which the name starts with Q or the name starts with O.&lt;/p&gt;" regex="Olivia.*(.*\n)+Quinn.*(.*\n)+Octavio.*\n$" starter_code="table = new SimpleTable("baby-2010.csv");
for (row: table) {
if (row.getField("name").startsWith("Q")) {
    print(row);
  }
}" solution_code="table = new SimpleTable("baby-2010.csv");
for (row: table) {
if (row.getField("name").startsWith("Q") ||
      row.getField("name").startsWith("O")) {
	print(row);
  }
}
"/&gt;
		</codeblock>
      <codeblock syntax="xml">
			<!-- !!!vertical-->
&lt;image-coding url_name="648a5ba36c024d21bc01a82513122938" xblock-family="xblock.v1" display_name="Learn By Doing" hints="Hint (1 of 3): Use &lt;code&gt;row.getField("name").endsWith("b")&lt;/code&gt;.
Hint (2 of 3): After the first test, add &lt;code&gt;|| row.getField("name").endsWith("c")&lt;/code&gt;
Hint (3 of 3): &lt;code&gt;if (row.getField("name").endsWith("b") || row.getField("name").endsWith("c")) {&lt;/code&gt;." tolerance="" body="&lt;p&gt;The starter code prints all the rows in which the name starts with Q. Edit the code to print the rows in which the name ends with b (lowercase) or the name ends with c (lowercase).&lt;/p&gt;" regex="Jacob.*(.*\n)+Jaycob.*\n$" starter_code="table = new SimpleTable("baby-2010.csv");
for (row: table) {
if (row.getField("name").startsWith("Q")) {
    print(row);
  }
}" solution_code="table = new SimpleTable("baby-2010.csv");
for (row: table) {
if (row.getField("name").endsWith("b") ||
      row.getField("name").endsWith("c")) {
	print(row);
  }
}
"/&gt;
		</codeblock>
      <!--A License section was here:<html filename="4617e1eb56b2433fabbed9b780f0266b" display_name="Licensing" editor="raw"/>-->
   </body>
</workbook_page>
